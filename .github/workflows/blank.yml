# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      app_name:
        type: choice
        description: Select app name
        options:
        - app1
        - app2
        - app3
        default: app1
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [ self-hosted, a ]
  
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
  
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
  
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
  
  test:
    # The type of runner that the job will run on
    runs-on: [ self-hosted, b ]
    env:
      APP_NAME: ${{ inputs.app_name }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Run test 1
        run: echo "TEST_ONE=success" >> TEST_RESULTS
        
      - name: Run test 2
        run: echo "TEST_TWO=success" >> TEST_RESULTS
        
      - name: Show env vars
        run: env
        
      - name: Check test results
        run: |
          cat TEST_RESULTS
          grep -vq success TEST_RESULTS && echo "TEST_RESULTS=failure" >> $GITHUB_ENV || echo  "TEST_RESULTS=success" >> $GITHUB_ENV
        
      - name: Generate JSON
        run: |
          BUILD_URL='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          JSON_FMT='{"GITHUB_ACTOR":"%s","GITHUB_REF_NAME":"%s", "BUILD_URL": "%s", "APP_NAME": "%s", "TEST_RESULTS": "%s" }\n'
          printf "$JSON_FMT" "$GITHUB_ACTOR" "$GITHUB_REF_NAME" "$BUILD_URL" "$APP_NAME" "$TEST_RESULTS" > /tmp/msg.json
          cat /tmp/msg.json

      - name: Submit message
        run: |
          curl -s https://tchdnbfrg4lcaeeoocr22wkqbe0kfqqi.lambda-url.eu-west-1.on.aws/ \
            -XPOST -H 'Content-type: application/json' -d@/tmp/msg.json

      - name: 'APP_NAME: ${{ inputs.app_name }}'
        run: |
          [ "$TEST_RESULTS" == "success" ] && true || false
        
